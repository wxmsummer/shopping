// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/comment/comment.proto

package go_micro_service_comment

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CommentService service

type CommentService interface {
	// 新增一条评价
	AddComment(ctx context.Context, in *AddCommentReq, opts ...client.CallOption) (*Resp, error)
	// 根据商品id获取该商品的所有评价
	GetCommentsByProductId(ctx context.Context, in *GetCommentsByProductIdReq, opts ...client.CallOption) (*GetCommentsByProductIdResp, error)
	// 根据订单id（即评价id）获取该订单对应的评价
	GetCommentByOrderId(ctx context.Context, in *GetCommentByOrderIdReq, opts ...client.CallOption) (*GetCommentByOrderIdResp, error)
}

type commentService struct {
	c    client.Client
	name string
}

func NewCommentService(name string, c client.Client) CommentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.service.comment"
	}
	return &commentService{
		c:    c,
		name: name,
	}
}

func (c *commentService) AddComment(ctx context.Context, in *AddCommentReq, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "CommentService.AddComment", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentService) GetCommentsByProductId(ctx context.Context, in *GetCommentsByProductIdReq, opts ...client.CallOption) (*GetCommentsByProductIdResp, error) {
	req := c.c.NewRequest(c.name, "CommentService.GetCommentsByProductId", in)
	out := new(GetCommentsByProductIdResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentService) GetCommentByOrderId(ctx context.Context, in *GetCommentByOrderIdReq, opts ...client.CallOption) (*GetCommentByOrderIdResp, error) {
	req := c.c.NewRequest(c.name, "CommentService.GetCommentByOrderId", in)
	out := new(GetCommentByOrderIdResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommentService service

type CommentServiceHandler interface {
	// 新增一条评价
	AddComment(context.Context, *AddCommentReq, *Resp) error
	// 根据商品id获取该商品的所有评价
	GetCommentsByProductId(context.Context, *GetCommentsByProductIdReq, *GetCommentsByProductIdResp) error
	// 根据订单id（即评价id）获取该订单对应的评价
	GetCommentByOrderId(context.Context, *GetCommentByOrderIdReq, *GetCommentByOrderIdResp) error
}

func RegisterCommentServiceHandler(s server.Server, hdlr CommentServiceHandler, opts ...server.HandlerOption) error {
	type commentService interface {
		AddComment(ctx context.Context, in *AddCommentReq, out *Resp) error
		GetCommentsByProductId(ctx context.Context, in *GetCommentsByProductIdReq, out *GetCommentsByProductIdResp) error
		GetCommentByOrderId(ctx context.Context, in *GetCommentByOrderIdReq, out *GetCommentByOrderIdResp) error
	}
	type CommentService struct {
		commentService
	}
	h := &commentServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CommentService{h}, opts...))
}

type commentServiceHandler struct {
	CommentServiceHandler
}

func (h *commentServiceHandler) AddComment(ctx context.Context, in *AddCommentReq, out *Resp) error {
	return h.CommentServiceHandler.AddComment(ctx, in, out)
}

func (h *commentServiceHandler) GetCommentsByProductId(ctx context.Context, in *GetCommentsByProductIdReq, out *GetCommentsByProductIdResp) error {
	return h.CommentServiceHandler.GetCommentsByProductId(ctx, in, out)
}

func (h *commentServiceHandler) GetCommentByOrderId(ctx context.Context, in *GetCommentByOrderIdReq, out *GetCommentByOrderIdResp) error {
	return h.CommentServiceHandler.GetCommentByOrderId(ctx, in, out)
}
