// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/product/product.proto

package go_micro_service_product

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ProductService service

type ProductService interface {
	SearchByProductID(ctx context.Context, in *SearchByProductIDReq, opts ...client.CallOption) (*SearchResp, error)
	SearchByMethod(ctx context.Context, in *SearchByMethodReq, opts ...client.CallOption) (*SearchResp, error)
	SortByNameAndMethod(ctx context.Context, in *SortByNameAndMethodReq, opts ...client.CallOption) (*SortResp, error)
	AddProduct(ctx context.Context, in *AddProductReq, opts ...client.CallOption) (*Resp, error)
	UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...client.CallOption) (*Resp, error)
	DelProductByProductId(ctx context.Context, in *DelProductByProductIdReq, opts ...client.CallOption) (*Resp, error)
	GetCartByProductIds(ctx context.Context, in *GetCartReq, opts ...client.CallOption) (*GetCartResp, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.service.product"
	}
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) SearchByProductID(ctx context.Context, in *SearchByProductIDReq, opts ...client.CallOption) (*SearchResp, error) {
	req := c.c.NewRequest(c.name, "ProductService.SearchByProductID", in)
	out := new(SearchResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) SearchByMethod(ctx context.Context, in *SearchByMethodReq, opts ...client.CallOption) (*SearchResp, error) {
	req := c.c.NewRequest(c.name, "ProductService.SearchByMethod", in)
	out := new(SearchResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) SortByNameAndMethod(ctx context.Context, in *SortByNameAndMethodReq, opts ...client.CallOption) (*SortResp, error) {
	req := c.c.NewRequest(c.name, "ProductService.SortByNameAndMethod", in)
	out := new(SortResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) AddProduct(ctx context.Context, in *AddProductReq, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "ProductService.AddProduct", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "ProductService.UpdateProduct", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) DelProductByProductId(ctx context.Context, in *DelProductByProductIdReq, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "ProductService.DelProductByProductId", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) GetCartByProductIds(ctx context.Context, in *GetCartReq, opts ...client.CallOption) (*GetCartResp, error) {
	req := c.c.NewRequest(c.name, "ProductService.GetCartByProductIds", in)
	out := new(GetCartResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductService service

type ProductServiceHandler interface {
	SearchByProductID(context.Context, *SearchByProductIDReq, *SearchResp) error
	SearchByMethod(context.Context, *SearchByMethodReq, *SearchResp) error
	SortByNameAndMethod(context.Context, *SortByNameAndMethodReq, *SortResp) error
	AddProduct(context.Context, *AddProductReq, *Resp) error
	UpdateProduct(context.Context, *UpdateProductReq, *Resp) error
	DelProductByProductId(context.Context, *DelProductByProductIdReq, *Resp) error
	GetCartByProductIds(context.Context, *GetCartReq, *GetCartResp) error
}

func RegisterProductServiceHandler(s server.Server, hdlr ProductServiceHandler, opts ...server.HandlerOption) error {
	type productService interface {
		SearchByProductID(ctx context.Context, in *SearchByProductIDReq, out *SearchResp) error
		SearchByMethod(ctx context.Context, in *SearchByMethodReq, out *SearchResp) error
		SortByNameAndMethod(ctx context.Context, in *SortByNameAndMethodReq, out *SortResp) error
		AddProduct(ctx context.Context, in *AddProductReq, out *Resp) error
		UpdateProduct(ctx context.Context, in *UpdateProductReq, out *Resp) error
		DelProductByProductId(ctx context.Context, in *DelProductByProductIdReq, out *Resp) error
		GetCartByProductIds(ctx context.Context, in *GetCartReq, out *GetCartResp) error
	}
	type ProductService struct {
		productService
	}
	h := &productServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductService{h}, opts...))
}

type productServiceHandler struct {
	ProductServiceHandler
}

func (h *productServiceHandler) SearchByProductID(ctx context.Context, in *SearchByProductIDReq, out *SearchResp) error {
	return h.ProductServiceHandler.SearchByProductID(ctx, in, out)
}

func (h *productServiceHandler) SearchByMethod(ctx context.Context, in *SearchByMethodReq, out *SearchResp) error {
	return h.ProductServiceHandler.SearchByMethod(ctx, in, out)
}

func (h *productServiceHandler) SortByNameAndMethod(ctx context.Context, in *SortByNameAndMethodReq, out *SortResp) error {
	return h.ProductServiceHandler.SortByNameAndMethod(ctx, in, out)
}

func (h *productServiceHandler) AddProduct(ctx context.Context, in *AddProductReq, out *Resp) error {
	return h.ProductServiceHandler.AddProduct(ctx, in, out)
}

func (h *productServiceHandler) UpdateProduct(ctx context.Context, in *UpdateProductReq, out *Resp) error {
	return h.ProductServiceHandler.UpdateProduct(ctx, in, out)
}

func (h *productServiceHandler) DelProductByProductId(ctx context.Context, in *DelProductByProductIdReq, out *Resp) error {
	return h.ProductServiceHandler.DelProductByProductId(ctx, in, out)
}

func (h *productServiceHandler) GetCartByProductIds(ctx context.Context, in *GetCartReq, out *GetCartResp) error {
	return h.ProductServiceHandler.GetCartByProductIds(ctx, in, out)
}
